#!/usr/bin/env python
# -*- coding: utf-8 -*-

from petsys import daqd, config
from copy import deepcopy
from time import sleep
import argparse
import os


def get_list(input_list):
        vals = []
        comma_list = input_list.split(',')
        for item in comma_list:
                hyphen_list = item.split('-')
                if len(hyphen_list) > 1:
                        for i in range(int(hyphen_list[0]), int(hyphen_list[1])+1):
                                vals.append(i)
                else:
                        vals.append(float(hyphen_list[0]))
        return vals


parser = argparse.ArgumentParser(description='Acquire data for TDC calibration')
parser.add_argument("--config", type=str, required=True, help="Configuration file")
parser.add_argument("-o", type=str, dest="fileNamePrefix", required=False, help="Data filename (prefix)")
parser.add_argument("--time", type=float, required=True, help="Acquisition time (in seconds)")
parser.add_argument("--enable-hw-trigger", dest="hwTrigger", action="store_true", help="Enable the hardware coincidence filter")
parser.add_argument("--vth1", type=str, dest="vth1", required=True, help="comma separated values for vth1")
parser.add_argument("--vth2", type=str, dest="vth2", required=True, help="comma separated values for vth2")
parser.add_argument("--vthe", type=str, dest="vthe", required=True, help="comma separated values for vthe")
parser.add_argument("--taps", type=str, dest="taps", required=False, help="number of taps [0..6]")
parser.add_argument("--ov", type=str, dest="ov",   required=True, help="comma separated values for ov")
parser.add_argument("--trigger", type=str, dest="trigger", required=False, help="trigger type (none, ext, int)")
parser.add_argument("--freq", type=float, dest="freq", required=False, help="internal trigger frequency (in kHz)")
parser.add_argument("--phase", type=float, dest="phase", required=False, help="trigger phase (in clk)")
parser.add_argument("--pedestals", dest="pedestals", action="store_true", help="Enable the acquisition of pedestals")
parser.add_argument("--enable-channels", dest="enChannels", required=False, help="comma separated vector of enabled channels")
parser.add_argument("--fix-channels", dest="fixChannels", required=False, help="comma separated vector of channels for which vth1 is fixed at 30")

args = parser.parse_args()

vth1_list = get_list(args.vth1)
vth2_list = get_list(args.vth2)
vthe_list = get_list(args.vthe)
ov_list   = get_list(args.ov)

taps = 6
if args.taps:
        taps = args.taps

if( args.enChannels ):
        args.enChannels = args.enChannels.split(',')
        #print(args.enChannels)
1
if( args.fixChannels ):
        args.fixChannels = args.fixChannels.split(',')
        #print(args.fixChannels)

if not args.fileNamePrefix:
        with open('/data/tofhir2/last_run') as f:
                run = [int(x) for x in next(f).split()]
                os.remove('/data/tofhir2/last_run')
                with open('/data/tofhir2/last_run','w+') as f:
                        f.write(str(run[0]+1))
        args.fileNamePrefix = "/data/tofhir2/raw/run%04d" % (run[0]+1)

mask = config.LOAD_ALL
# if args.mode != "mixed":
#         mask ^= config.LOAD_QDCMODE_MAP
mask ^= config.LOAD_QDCMODE_MAP
systemConfig = config.ConfigFromFile(args.config, loadMask=mask)

daqd = daqd.Connection()
daqd.initializeSystem()
systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_ON)

if args.trigger == "int":
        daqd.write_config_register_tgr(8, 0x21A, 0x81)
        #daqd.setTestPulsePLL(512, int(1./(args.freq*6.25e-06)), args.phase, False)
        daqd.setTestPulsePLL(100, int(1./(args.freq*6.25e-06)), args.phase, False)
if args.trigger == "ext":
        print "FIXME"

asicsConfig = daqd.getAsicsConfig()

asicsConfig0 = deepcopy(asicsConfig)
daqd.openRawAcquisition(args.fileNamePrefix)
cfg = deepcopy(asicsConfig0)


#------------------------------------------------
# enable required channels (all if not specified)
activeAsics = daqd.getActiveAsics()
for portID, slaveID, chipID in activeAsics:
        ac = cfg[(portID, slaveID, chipID)]
        for channelID in range(32):
                cc = ac.channelConfig[channelID]
                cc.setValue("c_tgr_main", 0b11)

if( args.enChannels ):
        for portID, slaveID, chipID in activeAsics:
                ac = cfg[(portID, slaveID, chipID)]
                for channelID in args.enChannels:
                        cc = ac.channelConfig[int(channelID)]
                        cc.setValue("c_tgr_main", 0b00)

for portID, slaveID, chipID in activeAsics:
        ac = cfg[(portID, slaveID, chipID)]
        for channelID in range(32):
                cc = ac.channelConfig[channelID]
                cc.setValue("c_tgr_main", 0b00)


#--------------------------------
# scan on thresholds and / or ov
for vth1 in vth1_list:
        for vth2 in vth2_list:
                for vthe in vthe_list:
                        for ov in ov_list:
                                
                                for portID, slaveID, chipID in activeAsics:
                                        ac = cfg[(portID, slaveID, chipID)]
                                        for channelID in range(32):
                                                cc = ac.channelConfig[int(channelID)]
                                                
                                                #cc.setValue("cfg_a3_vth_t1", vth1)
                                                #cc.setValue("cfg_a3_vth_t2", dac_setting_vth2)
                                                #cc.setValue("cfg_a3_vth_e", dac_setting_vthe)
                                                
                                                dac_setting_vth1 = systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), "vth_t1", int(vth1))
                                                cc.setValue("cfg_a3_vth_t1", dac_setting_vth1)
                                                dac_setting_vth2 = systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), "vth_t2", int(vth2))
                                                cc.setValue("cfg_a3_vth_t2", dac_setting_vth2)
                                                dac_setting_vthe = systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), "vth_e", int(vthe))
                                                cc.setValue("cfg_a3_vth_e", dac_setting_vthe)
                                                #print("%d %d %d %d : %d,%d,%d") % (portID,slaveID,chipID,channelID,dac_setting_vth1,dac_setting_vth2,dac_setting_vthe)
                                                
                                                cc.setValue("cfg_a2_postamp_t_delay",int(taps))
                                                
                                if( args.fixChannels ):
                                        for ac in cfg.values():
                                                for ch in args.fixChannels:
                                                        
                                                        #cc.setValue("cfg_a3_vth_t1", 10)
                                                        #cc.setValue("cfg_a3_vth_t2", 10)
                                                
                                                        cc = ac.channelConfig[int(ch)]
                                                        dac_setting_vth1 = systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), "vth_t1", int(6))
                                                        cc.setValue("cfg_a3_vth_t1", dac_setting_vth1)
                                                        dac_setting_vth2 = systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), "vth_t2", int(3))
                                                        cc.setValue("cfg_a3_vth_t2", dac_setting_vth2)
                                
                                biasVoltageConfig = daqd.get_hvdac_config()
                                for key in daqd.getActiveBiasChannels():
                                        offset, prebd, bd, over__ = systemConfig.getBiasChannelDefaultSettings(key)
                                        vset = offset + bd + float(ov)
                                        dac_setting = systemConfig.mapBiasChannelVoltageToDAC(key, vset)
                                        biasVoltageConfig[key] = dac_setting
                                        daqd.set_hvdac_config(biasVoltageConfig)
                                        
                                daqd.setAsicsConfig(cfg)
                                sleep(0.1)
                                print "ov: %3.1f,   vth1: %2d,   vth2: %2d,   vthe: %2d" % (float(ov), int(vth1), int(vth2), int(vthe))
                                daqd.acquire(args.time, float(ov), 10000*(int(vth1)+1)+100*(int(vth2)+1)+int(vthe)+1)
                                        
systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_OFF)
daqd.setTestPulseNone()
